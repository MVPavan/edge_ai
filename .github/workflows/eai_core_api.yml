name: EAI-CORE-API

on:
  push:
    branches: [ "dev" ]
    paths: 
      - "eai_core_api/**"
  
  pull_request:
    branches: [ "dev" ]
    paths: 
      - "eai_core_api/**"

permissions:
  contents: read
  packages: write

env:
  image_name: "eai_core_api"
  image_version: "v1.0.0"

jobs:
  # build-core-api:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: eai_core_api

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set up Docker Compose
  #     uses: isbang/compose-action@v1.4.1
  #     with:
  #       compose-file: |
  #         ./eai_core_api/docker/compose.edgeai_db.yml

  #   - name: Set up Python 3.9
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.9"

  #   - name: Install Poetry
  #     run: |
  #       curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
    
  #   - name: Configure Poetry
  #     run: |
  #       poetry config virtualenvs.create true
  #       poetry config virtualenvs.in-project true

  #   - name: Cache Poetry virtualenv
  #     uses: actions/cache@v1
  #     id: cache
  #     with:
  #       path: ./.venv
  #       key: poetry-${{ hashFiles('**/poetry.lock') }}
  #       restore-keys: |
  #         poetry-${{ hashFiles('**/poetry.lock') }}

  #   - name: Install dependencies
  #     run: |
  #       poetry install --no-interaction --no-root
  #     if: steps.cache.outputs.cache-hit != 'true'

  #   # - name: Code Quality
  #   #   run: poetry run black . --check

  #   - name: Run server
  #     run: |
  #       source ./.venv/bin/activate
  #       python main.py &

  #   - name: Pytest
  #     run: |
  #       source ./.venv/bin/activate
  #       pytest


  docker-publish-core-api-local:

    # needs: build-core-api
    # if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
    runs-on: self-hosted
    
    defaults:
      run:
        working-directory: eai_core_api

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
      
    - name: Build and push the Docker image
      uses: docker/build-push-action@v4 
      with:
        context: .
        file: ./docker/core_api.Dockerfile
        push: true
        tags: localhost:5000/${{ env.image_name }}:${{ env.image_version}}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
  
    - name: Inspect
      run: |
        docker buildx imagetools inspect localhost:5000/${{ env.image_name }}:${{ env.image_version}}


    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  
  
  
  # docker-publish-core-api:
  #   needs: build-core-api
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: eai_core_api

  #   steps:
  #   - uses: actions/checkout@v3
      
  #   - name: Build the Docker image
  #     run: |
  #       repo_name=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
  #       docker build . --file docker/core_api.Dockerfile \
  #         --tag ghcr.io/$repo_name/${{ env.image_name }}:${{ env.image_version}}
  #   - name: Log in to GitHub Container Registry
  #     run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #   - name: Push Docker image
  #     run: |
  #       repo_name=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
  #       docker push ghcr.io/$repo_name/eai_core_api:v1.0.0
  #     # docker push ghcr.io/$repo_name/eai_core_api:$(date +%s)

  
  